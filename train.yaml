name: HR Linear Regression Train Model
description: Trains Linear Regression model with log transformation on HR compensation data
inputs:
  - name: data_path
    type: Dataset
  - name: preprocessing_pipeline
    type: Model
  - name: config
    type: String
outputs:
  - name: trained_model
    type: Model
  - name: training_history
    type: String
  - name: model_coefficients
    type: String
implementation:
  container:
    image: gurpreetgandhi/nesy-factory:v19
    command:
      - python3
      - -u
      - -c
      - |
        import sys, os, pickle, json, pandas as pd, numpy as np
        from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
        import argparse
        
        parser = argparse.ArgumentParser()
        parser.add_argument('--data_path', type=str, required=True)
        parser.add_argument('--preprocessing_pipeline', type=str, required=True)
        parser.add_argument('--config', type=str, required=True)
        parser.add_argument('--trained_model', type=str, required=True)
        parser.add_argument('--training_history', type=str, required=True)
        parser.add_argument('--model_coefficients', type=str, required=True)
        args = parser.parse_args()
        
        print(\"Starting HR Linear Regression Training\")
        
        # Load data
        if not os.path.exists(args.data_path):
            print(\"ERROR: data_path does not exist!\")
            sys.exit(1)
            
        if not os.path.exists(args.preprocessing_pipeline):
            print(\"ERROR: preprocessing_pipeline does not exist!\")
            sys.exit(1)
            
        try:
            with open(args.data_path, 'rb') as f:
                data_wrapper = pickle.load(f)
            print(\"Data loaded successfully\")
        except Exception as e:
            print(f\"ERROR loading data: {e}\")
            sys.exit(1)
            
        try:
            with open(args.preprocessing_pipeline, 'rb') as f:
                preprocess = pickle.load(f)
            print(\"Preprocessing pipeline loaded successfully\")
        except Exception as e:
            print(f\"ERROR loading preprocessing pipeline: {e}\")
            sys.exit(1)
            
        # Extract data
        X_train = data_wrapper.X_train
        y_train = data_wrapper.y_train
        X_test = data_wrapper.X_test
        y_test = data_wrapper.y_test
        model_pipeline = data_wrapper.model_pipeline
        
        print(f\"Training on {len(X_train)} samples, testing on {len(X_test)} samples\")
        
        # Train model
        print(\"Training model...\")
        model_pipeline.fit(X_train, y_train)
        
        # Make predictions
        y_pred_train = model_pipeline.predict(X_train)
        y_pred_test = model_pipeline.predict(X_test)
        
        # Calculate metrics
        train_r2 = r2_score(y_train, y_pred_train)
        test_r2 = r2_score(y_test, y_pred_test)
        train_mae = mean_absolute_error(y_train, y_pred_train)
        test_mae = mean_absolute_error(y_test, y_pred_test)
        train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
        test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
        
        # Extract coefficients
        pipe = model_pipeline.regressor_
        ohe = pipe.named_steps[\"prep\"].named_transformers_[\"cat\"]
        lin = pipe.named_steps[\"lin\"]
        
        feature_names = np.r_[data_wrapper.numeric_features, ohe.get_feature_names_out(data_wrapper.categorical_features)]
        coefs_log = lin.coef_
        
        coefficients_df = pd.DataFrame({
            \"feature\": feature_names,
            \"coef_log\": coefs_log,
            \"multiplier\": np.exp(coefs_log),
            \"percent_effect_vs_baseline\": (np.exp(coefs_log) - 1) * 100
        }).sort_values(\"feature\")
        
        # Create training history
        history = {
            'train_metrics': {
                'r2_score': float(train_r2),
                'mae': float(train_mae),
                'rmse': float(train_rmse)
            },
            'test_metrics': {
                'r2_score': float(test_r2),
                'mae': float(test_mae),
                'rmse': float(test_rmse)
            },
            'coefficients': coefficients_df.to_dict('records'),
            'feature_names': feature_names.tolist(),
            'intercept_log': float(lin.intercept_),
            'intercept_original': float(np.exp(lin.intercept_))
        }
        
        # Save results
        try:
            os.makedirs(os.path.dirname(args.trained_model), exist_ok=True)
            os.makedirs(os.path.dirname(args.training_history), exist_ok=True)
            os.makedirs(os.path.dirname(args.model_coefficients), exist_ok=True)
            
            # Save trained model
            with open(args.trained_model, 'wb') as f:
                pickle.dump(model_pipeline, f)
            
            # Save training history
            with open(args.training_history, 'w') as f:
                json.dump(history, f, indent=2)
            
            # Save coefficients as CSV string
            coefficients_csv = coefficients_df.to_csv(index=False)
            with open(args.model_coefficients, 'w') as f:
                f.write(coefficients_csv)
            
            print(\"=== Training Complete ===\")
            print(\"=== Test Performance ===\")
            print(f\"R^2:  {test_r2:.3f}\")
            print(f\"MAE:  {test_mae:,.0f}\")
            print(f\"RMSE: {test_rmse:,.0f}\")
            print(f\"\\n=== Training Performance ===\")
            print(f\"R^2:  {train_r2:.3f}\")
            print(f\"MAE:  {train_mae:,.0f}\")
            print(f\"RMSE: {train_rmse:,.0f}\")
            
            print(\"\\n=== Effects vs. baseline (drop='first') ===\")
            print(coefficients_df.to_string(index=False))
            
        except Exception as e:
            print(f\"ERROR saving results: {e}\")
            sys.exit(1)
    args:
      - --data_path
      - {inputPath: data_path}
      - --preprocessing_pipeline
      - {inputPath: preprocessing_pipeline}
      - --config
      - {inputValue: config}
      - --trained_model
      - {outputPath: trained_model}
      - --training_history
      - {outputPath: training_history}
      - --model_coefficients
      - {outputPath: model_coefficients}
