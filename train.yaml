name: HR Linear Regression Train Model
description: Trains Linear Regression model with log transformation on HR compensation data
inputs:
  - name: data_path
    type: Dataset
  - name: preprocessing_pipeline
    type: Model
  - name: config
    type: String
outputs:
  - name: trained_model
    type: Model
  - name: training_history
    type: String
  - name: model_coefficients
    type: String
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        python -c "
        import sys, os, pickle, json, pandas as pd, numpy as np
        from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
        
        print('Number of arguments received:', len(sys.argv))
        for i, arg in enumerate(sys.argv):
            if i == 3:  # config string might be long
                print(f'  Argument {i}: {arg[:100]}...')
            else:
                print(f'  Argument {i}: {arg}')
        
        # Get args - Expect 7 arguments total
        if len(sys.argv) < 7:
            raise ValueError(f'Expected 7 arguments, got {len(sys.argv)}')
        
        data_path = sys.argv[1]
        preprocessing_path = sys.argv[2]
        config_str = sys.argv[3]
        trained_model_path = sys.argv[4]
        training_history_path = sys.argv[5]
        model_coefficients_path = sys.argv[6]
        
        print('Starting HR Linear Regression Training')
        print(f'Data path: {data_path}')
        print(f'Preprocessing path: {preprocessing_path}')
        
        # Load data
        if not os.path.exists(data_path):
            raise FileNotFoundError(f'data_path does not exist: {data_path}')
            
        if not os.path.exists(preprocessing_path):
            raise FileNotFoundError(f'preprocessing_pipeline does not exist: {preprocessing_path}')
            
        try:
            with open(data_path, 'rb') as f:
                data_wrapper = pickle.load(f)
            print('Data loaded successfully')
        except Exception as e:
            raise Exception(f'ERROR loading data: {e}')
            
        try:
            with open(preprocessing_path, 'rb') as f:
                preprocess = pickle.load(f)
            print('Preprocessing pipeline loaded successfully')
        except Exception as e:
            raise Exception(f'ERROR loading preprocessing pipeline: {e}')
            
        # Extract data
        X_train = data_wrapper.X_train
        y_train = data_wrapper.y_train
        X_test = data_wrapper.X_test
        y_test = data_wrapper.y_test
        model_pipeline = data_wrapper.model_pipeline
        
        print(f'Training on {len(X_train)} samples, testing on {len(X_test)} samples')
        print(f'Features: {list(X_train.columns)}')
        
        # Train model
        print('Training model...')
        model_pipeline.fit(X_train, y_train)
        
        # Make predictions
        y_pred_train = model_pipeline.predict(X_train)
        y_pred_test = model_pipeline.predict(X_test)
        
        # Calculate metrics
        train_r2 = r2_score(y_train, y_pred_train)
        test_r2 = r2_score(y_test, y_pred_test)
        train_mae = mean_absolute_error(y_train, y_pred_train)
        test_mae = mean_absolute_error(y_test, y_pred_test)
        train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))
        test_rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
        
        # Extract coefficients with safe access
        try:
            pipe = model_pipeline.regressor_
            ohe = pipe.named_steps['prep'].named_transformers_['cat']
            lin = pipe.named_steps['lin']
            
            feature_names = np.r_[data_wrapper.numeric_features, ohe.get_feature_names_out(data_wrapper.categorical_features)]
            coefs_log = lin.coef_
            
            coefficients_df = pd.DataFrame({
                'feature': feature_names,
                'coef_log': coefs_log,
                'multiplier': np.exp(coefs_log),
                'percent_effect_vs_baseline': (np.exp(coefs_log) - 1) * 100
            }).sort_values('feature')
            
            intercept_log = float(lin.intercept_)
            intercept_original = float(np.exp(lin.intercept_))
            
        except Exception as e:
            print(f'Warning: Could not extract detailed coefficients: {e}')
            # Create basic coefficients structure
            feature_names = list(X_train.columns)
            coefficients_df = pd.DataFrame({
                'feature': feature_names,
                'coef_log': [0] * len(feature_names),
                'multiplier': [1] * len(feature_names),
                'percent_effect_vs_baseline': [0] * len(feature_names)
            })
            intercept_log = 0
            intercept_original = 1
        
        # Create training history
        history = {
            'train_metrics': {
                'r2_score': float(train_r2),
                'mae': float(train_mae),
                'rmse': float(train_rmse)
            },
            'test_metrics': {
                'r2_score': float(test_r2),
                'mae': float(test_mae),
                'rmse': float(test_rmse)
            },
            'coefficients': coefficients_df.to_dict('records'),
            'feature_names': feature_names.tolist(),
            'intercept_log': intercept_log,
            'intercept_original': intercept_original,
            'training_samples': len(X_train),
            'test_samples': len(X_test)
        }
        
        # Save results
        try:
            os.makedirs(os.path.dirname(trained_model_path) or '.', exist_ok=True)
            os.makedirs(os.path.dirname(training_history_path) or '.', exist_ok=True)
            os.makedirs(os.path.dirname(model_coefficients_path) or '.', exist_ok=True)
            
            # Save trained model
            with open(trained_model_path, 'wb') as f:
                pickle.dump(model_pipeline, f)
            
            # Save training history
            with open(training_history_path, 'w') as f:
                json.dump(history, f, indent=2)
            
            # Save coefficients as CSV string
            coefficients_csv = coefficients_df.to_csv(index=False)
            with open(model_coefficients_path, 'w') as f:
                f.write(coefficients_csv)
            
            print('Training Complete')
            print('Test Performance')
            print(f'R^2:  {test_r2:.3f}')
            print(f'MAE:  {test_mae:,.0f}')
            print(f'RMSE: {test_rmse:,.0f}')
            print(f'Training Performance')
            print(f'R^2:  {train_r2:.3f}')
            print(f'MAE:  {train_mae:,.0f}')
            print(f'RMSE: {train_rmse:,.0f}')
            
            print('Top Feature Effects')
            print(coefficients_df.head(10).to_string(index=False))
            
        except Exception as e:
            raise Exception(f'ERROR saving results: {e}')
        
        print('Model training completed successfully!')
        print(f'Trained model saved to: {trained_model_path}')
        print(f'Training history saved to: {training_history_path}')
        print(f'Coefficients saved to: {model_coefficients_path}')
        " "$0" "$1" "$2" "$3" "$4" "$5" "$6"
    args:
      - {inputPath: data_path}
      - {inputPath: preprocessing_pipeline}
      - {inputValue: config}
      - {outputPath: trained_model}
      - {outputPath: training_history}
      - {outputPath: model_coefficients}
